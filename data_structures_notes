Good programmers worry about data structures and their relationships.
—Linus Torvalds

### Chapter- 1


## Introducing data structures: Why you should learn about data structures

In this chapter - 
1. welcome to this book
2. what are data structures
3. why do you need data structures
4. examples of data structures making a difference
5. step-by-step guidelines to apply data structures in a project
..............................................................

Data structures make the world go round: information is the gold of the Internet Age, and data structures are necessary for handling and making sense of information. Data structures allow us to shape data in meaningful ways and query it to find what is relevant to us.

# WELCOME TO GROKKING DATA STRUCTURES:

Welcome to Grokking Data Structures! I’m super excited to accompany you on this journey through data structures.

In this book, I want to dispel some misconceptions about data structures: they are extremely useful in your everyday work. Even if you are not a researcher, they do make a difference, and they are not hard to learn: you do not need to
be a math expert to understand and use data structures!

During our journey, I will show you that data structures are not boring theoretical stuff. They have become part of our lives so much that I can claim you certainly use them
regularly without even realizing it. Besides coding, you have used or seen in action some of the data structures we will describe in normal life situations.

# DATA STRUCTURES ARE EVERYWHERE

You don’t believe me? We could make it interesting with a little bet, but that would be so unfair of me!

Let’s see. Do you ever go to a grocery or department store? When you go shopping, you fill your physical cart with items you want to buy: there it is, a container. But which
container in particular? I don’t want to spoil it for you, but you’ll be able to tell after reading this book.

Once you find everything you need, you go to the cashier to pay. While you wait your turn, you are literally in another data structure, a #queue!

Did I manage to convince you? If you are a software developer, convincing you will be even easier because if you write code, you must have used at least arrays. Not to mention
that, of course, if you are reading a digital version of this book, your e-reader uses many data structures to hold pages of the book, its words, the bookmarks you might add, and
so on.

# DATA STRUCTURES ARE FOR EVERYONE

This book teaches data structures to anyone, regardless of their background. You don’t need advanced math; you don’t need to have taken CS101 or any other course; you don’t
need to be a coding ninja, although some knowledge of Python might help. This book, like every book in the Grokking series, will provide you with an understanding of how
things work, explaining what a data structure is, what the basic structures are, and how you can objectively decide which data structure is better for your task. It’s a book for
beginners, meaning that it assumes no previous knowledge, and it relies on your intuition and visual memory. However, even if you are familiar with the subject, you might find it useful to brush up on your skills and get an even deeper understanding of some of the topics.

# WHAT ARE DATA STRUCTURES?

If you are reading this book, you are probably aware that we live in the so-called Age of Data, an era in which data has become an integral part of our lives. We are flooded with information, the production of which is accelerating at an unprecedented, exponential rate, fueled by technological advances. This stream of data is changing the way we live, work, and interact.

To make sense of this huge amount of information and
avoid being overwhelmed, we need to organize it somehow. That’s where data structures come in.

Data structures are a way of organizing and storing information in a computer or a program. They help to efficiently manage and manipulate data.

For example, if you want to find out whether a friend from school is on Facebook, you can. This is only possible because there is a data structure that organizes users in a way
that makes it easy and fast to search among a billion users.

# Algorithms and data structures

You often hear the term data structures used in conjunction with algorithms. In fact, you hear the term so often that you might ask whether they are the same thing. No, algorithms and data structures are not the same, although they are closely related.

An algorithm is a set of well-defined instructions, a step-by-step procedure designed to solve a specific problem or perform a particular task. In our Facebook example, we use
an algorithm that searches through all the users’ names and returns the most promising matches.

A data structure is a way of organizing and storing data in a computer or a programming language. It defines the relationship between the data elements, the operations that
can be performed, and the rules or constraints for accessing and modifying the data. Facebook users are stored in a database that organizes its data in a way that makes it
efficient to search for users by name.

NOTE: Algorithms are used to describe the operations performed on data structures. To use an analogy, data structures are like nouns, while algorithms are more like verbs.

Data structures and algorithms are interdependent, just like a meaningful sentence in English requires subjects, objects, and verbs to describe an action.

Data structures provide the organization and representation of information (the data), and algorithms serve as instructions for transforming that data. Each data structure
implicitly defines algorithms for operations, such as adding, retrieving, and removing its elements.

Some data structures are specifically designed to allow the efficient execution of certain algorithms, such as hash tables for key-based search. (Don’t worry if you don’t know
these terms at this point: they’ll all be covered later in the book.)

Thus, describing a data structure requires accurately explaining the algorithms behind its methods. In other words, in this book, you will learn about many algorithms.

# WHY SHOULD I CARE ABOUT DATA STRUCTURES?

Data structures are the building blocks of computer science. They are important because they help organize data, solve difficult problems, improve efficiency, optimize memory
usage, and avoid security risks. They are essential tools for effectively managing and manipulating information in computer programs.

Recently, new trends in computer science that take advantage of data structures have emerged, such as graph neural networks, an even more powerful version of the machine-
learning building blocks that power deep-learning models.

The database landscape is also evolving, and the concept of flexible indexing has recently been introduced. This is an indexing model based on data structures that can be
nested in any combination and at any depth. It is an extremely powerful tool, and you can only harness this power if you master data structures.

However, I can give you an even more powerful reason: learning about data structures can make you a better software developer. Knowing about data structures and algorithms is like adding a tool to your tool belt.

Have you ever heard of Maslow’s hammer, also known as the law of the instrument? It states that if your tool belt only has a hammer, you will be tempted to treat everything as a nail.

It’s an observation that people tend to apply what they
know to all sorts of different situations, even when it’s not
appropriate.

With data structures, if you only know how to use the
data structure called a hash table, you’ll be tempted to use it in every situation, even when you need to efficiently perform operations such as next and previous and would be better off using a tree.

Don’t worry if the previous example sounds obscure and
not obvious right now or if you don’t know some of the terms
used there: it’s a good reason to keep reading because we will
cover this topic later in the book.

This book gives you more tools to use when approaching
a problem such as this one and trains you to recognize oppor-
tunities to use these tools to improve your code.

# When do I need data structures?

In theory, you need data structures when you must organize
your data in a way that makes it easy and efficient to store
and retrieve it according to some special rules. That’s a very formal definition, and despite being formally correct, it feels somehow far away from our daily routine, from
the world as we make sense of it.

Let’s see some examples of data structures in action to give you a better idea.

# Searching like a pro

Tom has a large collection of items—imagine thousands of baseball cards or, on a larger scale, millions of products on his e-commerce site. These items have attributes, some of
which (such as a name) uniquely identify the items.

How should Tom search that collection? For example, how would he search for Joe Di Maggio’s card among all his cards?

He could, of course, go through them one by one until he finds the card he was looking for. If you like collecting cards as much as I do, you know that when you have thousands
of them, searching for a specific card could take a long time. Imagine how long it would take to search for a product 
in an online catalog with millions of items!

Tom needs a better way to store and search for items, and to learn about the tradeoffs that are required to balance different needs. This book offers a few different options for search-efficient data structures and can help you find the right one for your needs. so, how about starting with sorted arrays and binary search?

# So many users!

Let me describe another scenario. For Kat’s web application, she needs to keep track of logged-in users and their IPs.

First, she implements IP tracking by herself. Locally, it works fine. But when she deploys her changes to production, the data structure she has used is too slow to support
the amount of traffic on her web application, so it crashes the application server.

Then, considering how urgent fixing the problem has become, Kat out-sources the solution to a consulting firm, hoping they know better. Their solution is indeed fast. It even works well in production...until it doesn’t. It turns out that a hacker has figured out that, with the right sequence of calls, they can overload the data structure the external company used and crash Kat’s application again at will.

What happened here? The first time, performance was the
problem because the wrong data structure was used, and it was
too slow to operate at scale.

The second time, a better option was chosen. Unfortunately,
the new solution was used carelessly, leaving a vulnerability to an adversary sequence (a sequence of inputs chosen ad hoc to cause problems to the data structure). This vulnerability, in turn, allowed a denial of service (DoS) attack. In such a scenario, a hacker can use a vulnerability to make an application so slow that its legitimate users won’t be able to interact with it.

Is there any hope? We will see that hash tables, if used properly, could solve most of Kat’s problems. When talking about hash tables, we will learn more about the problem that
made the DoS attack possible, how to fix it, and, more importantly, what to look for: even if you buy a finished product from a third party, you need to know what questions to ask, to make sure they did everything right.

# Modeling relationships

Sandra is launching the next generation of social networks that will change the way we connect. Well, at least that’s her dream. She is still implementing a minimum viable product and hoping to get some funding.

She is making good progress, but she has hit a bit of a roadblock when it comes to tracking the relationship between users. She wants to try something like a spreadsheet or
a tabular structure, but she is not sure how to store it or implement queries about “friends of friends” relationships.

Sandra tries a naive solution by iterating through the entire list of users several times, but this somehow makes her application unresponsive, and she becomes very frustrated.

Sandra has only tried to do this in memory: What if she needs to add persistence to this data? And what if she later needs to find even more distant relationships such as “friend
of a friend of a friend” or the six degrees of Kevin Bacon? Unfortunately, an SQL data-base doesn’t seem to support everything she needs.

Later in this book, you’ll learn that graphs would help Sandra tame highly relational data and that she could use the breadth-first search algorithms to explore indirect friend
relationships. With graphs come graph databases, a different way of storing highly relational data that allows us to quickly run queries based on the relationships between dif-
ferent pieces of data.